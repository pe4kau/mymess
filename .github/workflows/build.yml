name: Build Messenger (Windows / MSYS2)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSYS2 (MINGW64) with deps
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-qt6-base
            mingw-w64-x86_64-qt6-tools
            mingw-w64-x86_64-qt6-svg
            mingw-w64-x86_64-protobuf
            mingw-w64-x86_64-grpc
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-sqlite3
            mingw-w64-x86_64-libpqxx
            mingw-w64-x86_64-postgresql
            mingw-w64-x86_64-hiredis
            mingw-w64-x86_64-argon2
            mingw-w64-x86_64-gtest

      - name: Configure (CMake, Ninja, Release)
        shell: msys2 {0}
        run: |
          set -e
          SRC="."
          if [ -d deliverable ]; then SRC="deliverable"; fi
          cmake -S "$SRC" -B build -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Build all targets
        shell: msys2 {0}
        run: |
          set -e
          cmake --build build --config Release -v

      - name: Run tests (if any)
        shell: msys2 {0}
        run: |
          if [ -f build/CTestTestfile.cmake ]; then
            ctest --test-dir build --output-on-failure || true
          else
            echo "No CTest configuration found. Skipping tests."
          fi

      - name: List built executables
        shell: msys2 {0}
        run: |
          find build -type f -name "*.exe" -print || true

      - name: Upload executables (raw)
        uses: actions/upload-artifact@v4
        with:
          name: messenger-executables
          path: build/**/*.exe
          if-no-files-found: error

      - name: Package GUI (windeployqt)
        shell: msys2 {0}
        run: |
          set -e
          GUI_EXE="$(find build -type f -name "*.exe" | grep -i -E "(gui|client).*\.exe" | head -n1 || true)"
          if [ -z "$GUI_EXE" ]; then
            echo "GUI executable not found. Skipping portable packaging."
            exit 0
          fi
          mkdir -p portable
          cp "$GUI_EXE" portable/
          if command -v windeployqt >/dev/null 2>&1; then
            WDEP=windeployqt
          elif command -v windeployqt-qt6 >/dev/null 2>&1; then
            WDEP=windeployqt-qt6
          else
            echo "windeployqt not found in PATH; skipping packaging."
            exit 0
          fi
          "$WDEP" --release portable/"$(basename "$GUI_EXE")" || "$WDEP" portable/"$(basename "$GUI_EXE")"

      - name: Upload portable GUI
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: messenger-gui-portable
          path: portable/**
          if-no-files-found: warn



